// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZKM.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zk {

namespace {

const ::google::protobuf::Descriptor* ZKM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZKM_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZKM_2eproto() {
  protobuf_AddDesc_ZKM_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZKM.proto");
  GOOGLE_CHECK(file != NULL);
  ZKM_descriptor_ = file->message_type(0);
  static const int ZKM_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKM, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKM, hwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKM, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKM, options_),
  };
  ZKM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZKM_descriptor_,
      ZKM::default_instance_,
      ZKM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZKM));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZKM_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZKM_descriptor_, &ZKM::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZKM_2eproto() {
  delete ZKM::default_instance_;
  delete ZKM_reflection_;
}

void protobuf_AddDesc_ZKM_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tZKM.proto\022\002zk\"\?\n\003ZKM\022\013\n\003key\030\001 \001(\t\022\014\n\004h"
    "wid\030\002 \001(\t\022\014\n\004type\030\003 \001(\005\022\017\n\007options\030\004 \003(\t"
    "B\032\n\020org.gibsonsec.zkB\006ZKMObj", 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZKM.proto", &protobuf_RegisterTypes);
  ZKM::default_instance_ = new ZKM();
  ZKM::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZKM_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZKM_2eproto {
  StaticDescriptorInitializer_ZKM_2eproto() {
    protobuf_AddDesc_ZKM_2eproto();
  }
} static_descriptor_initializer_ZKM_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ZKM::kKeyFieldNumber;
const int ZKM::kHwidFieldNumber;
const int ZKM::kTypeFieldNumber;
const int ZKM::kOptionsFieldNumber;
#endif  // !_MSC_VER

ZKM::ZKM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZKM::InitAsDefaultInstance() {
}

ZKM::ZKM(const ZKM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZKM::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hwid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZKM::~ZKM() {
  SharedDtor();
}

void ZKM::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (hwid_ != &::google::protobuf::internal::kEmptyString) {
    delete hwid_;
  }
  if (this != default_instance_) {
  }
}

void ZKM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZKM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZKM_descriptor_;
}

const ZKM& ZKM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZKM_2eproto();  return *default_instance_;
}

ZKM* ZKM::default_instance_ = NULL;

ZKM* ZKM::New() const {
  return new ZKM;
}

void ZKM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_hwid()) {
      if (hwid_ != &::google::protobuf::internal::kEmptyString) {
        hwid_->clear();
      }
    }
    type_ = 0;
  }
  options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZKM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hwid;
        break;
      }
      
      // optional string hwid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hwid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hwid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hwid().data(), this->hwid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_options;
        break;
      }
      
      // repeated string options = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->options(0).data(), this->options(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_options;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZKM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // optional string hwid = 2;
  if (has_hwid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwid().data(), this->hwid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hwid(), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // repeated string options = 4;
  for (int i = 0; i < this->options_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->options(i).data(), this->options(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->options(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZKM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // optional string hwid = 2;
  if (has_hwid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hwid().data(), this->hwid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hwid(), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // repeated string options = 4;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->options(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZKM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string hwid = 2;
    if (has_hwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hwid());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated string options = 4;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->options(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZKM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZKM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZKM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZKM::MergeFrom(const ZKM& from) {
  GOOGLE_CHECK_NE(&from, this);
  options_.MergeFrom(from.options_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_hwid()) {
      set_hwid(from.hwid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZKM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZKM::CopyFrom(const ZKM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZKM::IsInitialized() const {
  
  return true;
}

void ZKM::Swap(ZKM* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(hwid_, other->hwid_);
    std::swap(type_, other->type_);
    options_.Swap(&other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZKM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZKM_descriptor_;
  metadata.reflection = ZKM_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zk

// @@protoc_insertion_point(global_scope)
