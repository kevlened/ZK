// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZKReply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zk {

namespace {

const ::google::protobuf::Descriptor* ZKReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZKReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZKReply_2eproto() {
  protobuf_AddDesc_ZKReply_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZKReply.proto");
  GOOGLE_CHECK(file != NULL);
  ZKReply_descriptor_ = file->message_type(0);
  static const int ZKReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKReply, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKReply, reply_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKReply, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKReply, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKReply, app_),
  };
  ZKReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZKReply_descriptor_,
      ZKReply::default_instance_,
      ZKReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZKReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZKReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZKReply_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZKReply_descriptor_, &ZKReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZKReply_2eproto() {
  delete ZKReply::default_instance_;
  delete ZKReply_reflection_;
}

void protobuf_AddDesc_ZKReply_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rZKReply.proto\022\002zk\"W\n\007ZKReply\022\021\n\005reply\030"
    "\001 \001(\005:\002-1\022\021\n\treply_str\030\002 \001(\t\022\013\n\003key\030\003 \001("
    "\t\022\014\n\004user\030\004 \001(\t\022\013\n\003app\030\005 \001(\tB\036\n\020org.gibs"
    "onsec.zkB\nZKReplyObj", 140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZKReply.proto", &protobuf_RegisterTypes);
  ZKReply::default_instance_ = new ZKReply();
  ZKReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZKReply_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZKReply_2eproto {
  StaticDescriptorInitializer_ZKReply_2eproto() {
    protobuf_AddDesc_ZKReply_2eproto();
  }
} static_descriptor_initializer_ZKReply_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ZKReply::kReplyFieldNumber;
const int ZKReply::kReplyStrFieldNumber;
const int ZKReply::kKeyFieldNumber;
const int ZKReply::kUserFieldNumber;
const int ZKReply::kAppFieldNumber;
#endif  // !_MSC_VER

ZKReply::ZKReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZKReply::InitAsDefaultInstance() {
}

ZKReply::ZKReply(const ZKReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZKReply::SharedCtor() {
  _cached_size_ = 0;
  reply_ = -1;
  reply_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZKReply::~ZKReply() {
  SharedDtor();
}

void ZKReply::SharedDtor() {
  if (reply_str_ != &::google::protobuf::internal::kEmptyString) {
    delete reply_str_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (app_ != &::google::protobuf::internal::kEmptyString) {
    delete app_;
  }
  if (this != default_instance_) {
  }
}

void ZKReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZKReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZKReply_descriptor_;
}

const ZKReply& ZKReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZKReply_2eproto();  return *default_instance_;
}

ZKReply* ZKReply::default_instance_ = NULL;

ZKReply* ZKReply::New() const {
  return new ZKReply;
}

void ZKReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_ = -1;
    if (has_reply_str()) {
      if (reply_str_ != &::google::protobuf::internal::kEmptyString) {
        reply_str_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_app()) {
      if (app_ != &::google::protobuf::internal::kEmptyString) {
        app_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZKReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reply = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reply_str;
        break;
      }
      
      // optional string reply_str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reply_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reply_str().data(), this->reply_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }
      
      // optional string key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }
      
      // optional string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_app;
        break;
      }
      
      // optional string app = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app().data(), this->app().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZKReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reply = 1 [default = -1];
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reply(), output);
  }
  
  // optional string reply_str = 2;
  if (has_reply_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reply_str().data(), this->reply_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reply_str(), output);
  }
  
  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key(), output);
  }
  
  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }
  
  // optional string app = 5;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->app(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZKReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reply = 1 [default = -1];
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reply(), target);
  }
  
  // optional string reply_str = 2;
  if (has_reply_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reply_str().data(), this->reply_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reply_str(), target);
  }
  
  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }
  
  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }
  
  // optional string app = 5;
  if (has_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app().data(), this->app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->app(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZKReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reply = 1 [default = -1];
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply());
    }
    
    // optional string reply_str = 2;
    if (has_reply_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reply_str());
    }
    
    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // optional string app = 5;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZKReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZKReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZKReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZKReply::MergeFrom(const ZKReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_reply_str()) {
      set_reply_str(from.reply_str());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_app()) {
      set_app(from.app());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZKReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZKReply::CopyFrom(const ZKReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZKReply::IsInitialized() const {
  
  return true;
}

void ZKReply::Swap(ZKReply* other) {
  if (other != this) {
    std::swap(reply_, other->reply_);
    std::swap(reply_str_, other->reply_str_);
    std::swap(key_, other->key_);
    std::swap(user_, other->user_);
    std::swap(app_, other->app_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZKReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZKReply_descriptor_;
  metadata.reflection = ZKReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zk

// @@protoc_insertion_point(global_scope)
