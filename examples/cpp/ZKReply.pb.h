// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZKReply.proto

#ifndef PROTOBUF_ZKReply_2eproto__INCLUDED
#define PROTOBUF_ZKReply_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace zk {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZKReply_2eproto();
void protobuf_AssignDesc_ZKReply_2eproto();
void protobuf_ShutdownFile_ZKReply_2eproto();

class ZKReply;

// ===================================================================

class ZKReply : public ::google::protobuf::Message {
 public:
  ZKReply();
  virtual ~ZKReply();
  
  ZKReply(const ZKReply& from);
  
  inline ZKReply& operator=(const ZKReply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZKReply& default_instance();
  
  void Swap(ZKReply* other);
  
  // implements Message ----------------------------------------------
  
  ZKReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZKReply& from);
  void MergeFrom(const ZKReply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 reply = 1 [default = -1];
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 1;
  inline ::google::protobuf::int32 reply() const;
  inline void set_reply(::google::protobuf::int32 value);
  
  // optional string reply_str = 2;
  inline bool has_reply_str() const;
  inline void clear_reply_str();
  static const int kReplyStrFieldNumber = 2;
  inline const ::std::string& reply_str() const;
  inline void set_reply_str(const ::std::string& value);
  inline void set_reply_str(const char* value);
  inline void set_reply_str(const char* value, size_t size);
  inline ::std::string* mutable_reply_str();
  inline ::std::string* release_reply_str();
  
  // optional string key = 3;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  
  // optional string app = 5;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 5;
  inline const ::std::string& app() const;
  inline void set_app(const ::std::string& value);
  inline void set_app(const char* value);
  inline void set_app(const char* value, size_t size);
  inline ::std::string* mutable_app();
  inline ::std::string* release_app();
  
  // @@protoc_insertion_point(class_scope:zk.ZKReply)
 private:
  inline void set_has_reply();
  inline void clear_has_reply();
  inline void set_has_reply_str();
  inline void clear_has_reply_str();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_app();
  inline void clear_has_app();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* reply_str_;
  ::std::string* key_;
  ::std::string* user_;
  ::std::string* app_;
  ::google::protobuf::int32 reply_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ZKReply_2eproto();
  friend void protobuf_AssignDesc_ZKReply_2eproto();
  friend void protobuf_ShutdownFile_ZKReply_2eproto();
  
  void InitAsDefaultInstance();
  static ZKReply* default_instance_;
};
// ===================================================================


// ===================================================================

// ZKReply

// optional int32 reply = 1 [default = -1];
inline bool ZKReply::has_reply() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZKReply::set_has_reply() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZKReply::clear_has_reply() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZKReply::clear_reply() {
  reply_ = -1;
  clear_has_reply();
}
inline ::google::protobuf::int32 ZKReply::reply() const {
  return reply_;
}
inline void ZKReply::set_reply(::google::protobuf::int32 value) {
  set_has_reply();
  reply_ = value;
}

// optional string reply_str = 2;
inline bool ZKReply::has_reply_str() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZKReply::set_has_reply_str() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZKReply::clear_has_reply_str() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZKReply::clear_reply_str() {
  if (reply_str_ != &::google::protobuf::internal::kEmptyString) {
    reply_str_->clear();
  }
  clear_has_reply_str();
}
inline const ::std::string& ZKReply::reply_str() const {
  return *reply_str_;
}
inline void ZKReply::set_reply_str(const ::std::string& value) {
  set_has_reply_str();
  if (reply_str_ == &::google::protobuf::internal::kEmptyString) {
    reply_str_ = new ::std::string;
  }
  reply_str_->assign(value);
}
inline void ZKReply::set_reply_str(const char* value) {
  set_has_reply_str();
  if (reply_str_ == &::google::protobuf::internal::kEmptyString) {
    reply_str_ = new ::std::string;
  }
  reply_str_->assign(value);
}
inline void ZKReply::set_reply_str(const char* value, size_t size) {
  set_has_reply_str();
  if (reply_str_ == &::google::protobuf::internal::kEmptyString) {
    reply_str_ = new ::std::string;
  }
  reply_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZKReply::mutable_reply_str() {
  set_has_reply_str();
  if (reply_str_ == &::google::protobuf::internal::kEmptyString) {
    reply_str_ = new ::std::string;
  }
  return reply_str_;
}
inline ::std::string* ZKReply::release_reply_str() {
  clear_has_reply_str();
  if (reply_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reply_str_;
    reply_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string key = 3;
inline bool ZKReply::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZKReply::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZKReply::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZKReply::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ZKReply::key() const {
  return *key_;
}
inline void ZKReply::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ZKReply::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ZKReply::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZKReply::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ZKReply::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user = 4;
inline bool ZKReply::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZKReply::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZKReply::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZKReply::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& ZKReply::user() const {
  return *user_;
}
inline void ZKReply::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void ZKReply::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void ZKReply::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZKReply::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* ZKReply::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string app = 5;
inline bool ZKReply::has_app() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZKReply::set_has_app() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZKReply::clear_has_app() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZKReply::clear_app() {
  if (app_ != &::google::protobuf::internal::kEmptyString) {
    app_->clear();
  }
  clear_has_app();
}
inline const ::std::string& ZKReply::app() const {
  return *app_;
}
inline void ZKReply::set_app(const ::std::string& value) {
  set_has_app();
  if (app_ == &::google::protobuf::internal::kEmptyString) {
    app_ = new ::std::string;
  }
  app_->assign(value);
}
inline void ZKReply::set_app(const char* value) {
  set_has_app();
  if (app_ == &::google::protobuf::internal::kEmptyString) {
    app_ = new ::std::string;
  }
  app_->assign(value);
}
inline void ZKReply::set_app(const char* value, size_t size) {
  set_has_app();
  if (app_ == &::google::protobuf::internal::kEmptyString) {
    app_ = new ::std::string;
  }
  app_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZKReply::mutable_app() {
  set_has_app();
  if (app_ == &::google::protobuf::internal::kEmptyString) {
    app_ = new ::std::string;
  }
  return app_;
}
inline ::std::string* ZKReply::release_app() {
  clear_has_app();
  if (app_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_;
    app_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zk

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZKReply_2eproto__INCLUDED
